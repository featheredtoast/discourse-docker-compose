services:
  # Mailhog for testing...
  mail:
    image: mailhog/mailhog
    ports:
      - 8025:8025
  # Redis isn't as customized, use off the shelf
  redis:
    image: redis
    restart: unless-stopped
    volumes:
      - ./shared/redis:/data

  # separate db instance
  # migrate to separated postgres data
  #https://github.com/docker-library/postgres/pull/1259
  # built from https://github.com/featheredtoast/discourse-db
  db:
    image: featheredtoast/discourse-db:pg15
    restart: unless-stopped
    volumes:
      - ./shared/db:/var/lib/postgresql
      - ./shared/db/data:/var/lib/postgresql/data
    environment:
      DB_PASSWORD: SOME_SECRET

  # zero config/plugin batteries included image built from https://github.com/featheredtoast/discourse-docker-compose/blob/main/.github/workflows/push-web-only.yml
  # built from `launcher build web_only`
  web:
    image: featheredtoast/discourse
    restart: unless-stopped
    volumes:
      - ./shared/web:/shared
    links:
      - db
      - redis
      - mail
    environment:
      DISCOURSE_DB_HOST: db
      DISCOURSE_DB_PASSWORD: SOME_SECRET
      DISCOURSE_DEVELOPER_EMAILS: user@example.com
      DISCOURSE_HOSTNAME: localhost
      DISCOURSE_REDIS_HOST: redis
      DISCOURSE_SMTP_ADDRESS: mail
      DISCOURSE_SMTP_PORT: 1025
      DISCOURSE_SMTP_PASSWORD: pa$$word
      DISCOURSE_SMTP_USER_NAME: user@example.com
      # Once the following PR is in place
      # https://github.com/discourse/discourse_docker/pull/977
      # this would allow for letsencrypt to setup on boot
      # when a valid email is provided like so:
      # LETSENCRYPT_ACCOUNT_EMAIL: test@example.com
    ports:
      - 443:443
      - 80:80
    depends_on:
      - db
      - redis
